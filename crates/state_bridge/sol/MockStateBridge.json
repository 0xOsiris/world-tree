{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidRoot",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "mockBridgedWorldID",
      "outputs": [
        {
          "internalType": "contract MockBridgedWorldID",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "propagateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "worldID",
      "outputs": [
        {
          "internalType": "contract WorldIDIdentityManagerMock",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b5061001a336100c7565b61011160405161002990610117565b908152602001604051809103906000f08015801561004b573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055604051601e9061007b90610124565b60ff9091168152602001604051809103906000f0801580156100a1573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055610131565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610119806105b283390190565b612481806106cb83390190565b610472806101406000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100d2578063d9605de4146100f0578063f2fde38b1461011057600080fd5b80631213c3ef14610077578063380db829146100c0578063715018a6146100ca575b600080fd5b6001546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100c8610123565b005b6100c86101c5565b60005473ffffffffffffffffffffffffffffffffffffffff16610097565b6002546100979073ffffffffffffffffffffffffffffffffffffffff1681565b6100c861011e36600461040f565b6101d9565b600154604080517fd7b0fef1000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163d7b0fef19160048083019260209291908290030181865afa158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b7919061044c565b90506101c281610292565b50565b6101cd610319565b6101d7600061039a565b565b6101e1610319565b73ffffffffffffffffffffffffffffffffffffffff8116610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101c28161039a565b6002546040517ffbde929b0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063fbde929b90602401600060405180830381600087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610280565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561042157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461044557600080fd5b9392505050565b60006020828403121561045e57600080fd5b505191905056fea164736f6c634300080f000a608060405234801561001057600080fd5b5060405161011938038061011983398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60bb8061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063c46d227a146037578063d7b0fef1146048575b600080fd5b604660423660046096565b605d565b005b60005460405190815260200160405180910390f35b6000805482825590829060405183907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a45050565b60006020828403121560a757600080fd5b503591905056fea164736f6c634300080f000a60a060405262093a8060005560405161001790610147565b604051809103906000f080158015610033573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905534801561006057600080fd5b5060405161248138038061248183398101604081905261007f91610154565b80610093816100ce60201b6103d21760201c565b6100b957604051630220cee360e61b815260ff8216600482015260240160405180910390fd5b60ff166080526100c8336100f5565b5061017e565b60006010602060ff841682118015906100ed57508060ff168460ff1611155b949350505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611ade806109a383390190565b60006020828403121561016657600080fd5b815160ff8116811461017757600080fd5b9392505050565b60805161080a6101996000396000610114015261080a6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063c70aa72711610076578063f1c621ee1161005b578063f1c621ee1461016b578063f2fde38b146101be578063fbde929b146101d157600080fd5b8063c70aa72714610150578063d7b0fef11461016357600080fd5b80638da5cb5b116100a75780638da5cb5b146100e05780638e5cdd501461010d578063b0d690791461013e57600080fd5b8063354ca120146100c3578063715018a6146100d8575b600080fd5b6100d66100d13660046106d6565b6101e4565b005b6100d661029b565b60045460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610104565b6000545b604051908152602001610104565b6100d661015e366004610729565b6102af565b6101426102c3565b61019d610179366004610729565b6002602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610104565b6100d66101cc366004610742565b610308565b6100d66101df366004610729565b6103c1565b6101ed856103f9565b60035460408051608081018252878152602081018690528082018790526060810185905290517f2357251100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916323572511916102649185919060040161077f565b60006040518083038186803b15801561027c57600080fd5b505afa158015610290573d6000803e3d6000fd5b505050505050505050565b6102a36104bb565b6102ad600061053c565b565b6102b76104bb565b6102c0816105b3565b50565b6000600154600003610301576040517f5b8dabb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060015490565b6103106104bb565b73ffffffffffffffffffffffffffffffffffffffff81166103b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c08161053c565b6103c96104bb565b6102c0816105ee565b60006010602060ff841682118015906103f157508060ff168460ff1611155b949350505050565b60015481036104055750565b6000818152600260205260408120546fffffffffffffffffffffffffffffffff1690819003610460576040517fddae3b7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005461047f6fffffffffffffffffffffffffffffffff8316426107bf565b11156104b7576040517f3ae7359e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60045473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103af565b6004805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008190556040518181527f147b815b6a3a8dd5d49310410e089f6b5e9f3782e944772edc938c8bb48ef1219060200160405180910390a150565b6000818152600260205260409020546fffffffffffffffffffffffffffffffff168015610647576040517f6650c4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182905560008281526002602090815260409182902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016426fffffffffffffffffffffffffffffffff8116918217909255835186815292830152917fe97c89cbb137505b36f55ebfc9732fd6c4c73ff43d49db239fc25f6e7a534145910160405180910390a1505050565b60008060008060006101808087890312156106f057600080fd5b8635955060208701359450604087013593506060870135925087818801111561071857600080fd5b506080860190509295509295909350565b60006020828403121561073b57600080fd5b5035919050565b60006020828403121561075457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b9392505050565b610180810161010080858437600090830181815284915b60048110156107b5578251825260209283019290910190600101610796565b5050509392505050565b6000828210156107f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea164736f6c634300080f000a608060405234801561001057600080fd5b50611abe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063235725111461004657806344f636921461005b578063f2457c8d14610084575b600080fd5b61005961005436600461198b565b610097565b005b61006e6100693660046119c2565b61032f565b60405161007b91906119e6565b60405180910390f35b610059610092366004611a17565b61038c565b6000806100a3836106c2565b9150915060006040516101008682377f168e4fddac50a40d5bcff39c7fa9207cd368444c0c01a86690a6645b52f3aa1f6101008201527f2139a256456825daa623957c4f2ea1a0d26f135769e450759142a7159b0a44766101208201527f07859424108de88bfbe5c80a19c0e80ba35fda4383d3fd125305dd04b4c08fe46101408201527f142ad7a93ca0c554a9f0303059e5a24e85400004a730598bd423b0090f4b3d4a6101608201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08201527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008201527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f61022082015283610240820152826102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e08201526020816103008360085afa905116905080610328576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61033761190d565b61034a82358360015b60200201356109c8565b81526103686060830135604084013560a08501356080860135610b67565b6020830152604082015261038260c0830135836007610340565b6060820152919050565b60008061039f84825b6020020135611041565b909250905060008080806103bb604089013560208a0135611165565b929650909450925090506000806103d38a6003610395565b915091506000806103e38b6106c2565b915091506103ef61192b565b8a8152602081018a905260408101889052606081018990526080810186905260a0810187905260c0810185905260e081018490527f168e4fddac50a40d5bcff39c7fa9207cd368444c0c01a86690a6645b52f3aa1f6101008201527f2139a256456825daa623957c4f2ea1a0d26f135769e450759142a7159b0a44766101208201527f07859424108de88bfbe5c80a19c0e80ba35fda4383d3fd125305dd04b4c08fe46101408201527f142ad7a93ca0c554a9f0303059e5a24e85400004a730598bd423b0090f4b3d4a6101608201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08201527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008201527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f610220820152610240810183905261026081018290527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e0820152600061065e61194a565b6020816103008560085afa915081158061067a57508051600114155b156106b1576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050505050505050565b6000806000600190506040516040810160007f0335f514c2acb9b255aae85514122267cd7d16e374c6231a2c34417d3449125483527f07fa1580c1cc3ed4f6d660c6f60f86afedd8a12fb90b2e8ed4f7e310c88b97f760208401527f20b781dd0db3b7980a4b3814128c86e597e1442d0fc9eb7f932a5229494d6b7982527f17d1cef436eb2f665670c7b34854e62c227043a7b111a539c0295518bbab3ca96020830152863590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f260945445b4205f874ab7e203a18240e51c9d3c896ea300d40132b1c2f50299a82527f11087a8b76b0f957e1c482c909302916795f811a06866059e403689c01c903fb6020830152602087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f11d20fd81c0e5cf48ba1469ccb8ac99dcdc7cf746a6e70762a939d63dcc52dbf82527f2d447c5f134eff527d7bcaace88b3842c42b800d8dc049e0a6e72f5efc14293d6020830152604087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f107cd54a1606a6a873bed4c1b76af48975e66dcf6c127b4c799ad4fdd230b87c82527f1a51b81f6c07725ebcc56ebb1c482b99340eaa9bcb86cc09aed6f58a28e530b66020830152606087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110841693505060408160608360075afa831692505060408160808360065afa815160209092015191945090925016806109c2576040517fa54f8e2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50915091565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783101580610a1957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210155b15610a50576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82158015610a5c575081155b15610a6957506000610b61565b6000610ade7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47877f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47898a0909086114b0565b9050808303610af3575050600182901b610b61565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478082068103068303610b2d575050600182811b17610b61565b6040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b92915050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786101580610bb957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b80610be457507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478410155b80610c0f57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310155b15610c46576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82848688171717600003610c5f57506000905080611038565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610caf60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611a73565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a8c0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c8d0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c8d090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5089450610e707f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478e870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681030690565b9350505050600080610ef77f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610ea957610ea9611a44565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478586097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47878809086114b0565b9050610f687f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478488080961153f565b15915050610f7783838361159b565b90935091508683148015610f8a57508186145b15610fb45780610f9b576000610f9e565b60025b60ff1660028a901b176000179450879350611034565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478084068103068714801561100e57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780830681030686145b15610b2d578061101f576000611022565b60025b60ff1660028a901b1760011794508793505b5050505b94509492505050565b6000808260000361105757506000928392509050565b600183811c9250808416147f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783106110bb576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61112e7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47867f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4788890909086114b0565b915080156109c2577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808306810306915050915091565b600080808085158015611176575084155b1561118c575060009250829150819050806114a7565b600286811c945085935060018088161490808816147f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47861015806111f057507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b15611227576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761127560037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611a73565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47888a0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a8b0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a8b090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e50896506114367f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681030690565b955061144387878661159b565b909750955084156114a1577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780880681030696507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780870681030695505b50505050505b92959194509250565b60006114dc827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f526117f2565b9050817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478283091461153a576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008061156c837f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f526117f2565b9050827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828309149392505050565b600080806115f17f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808788097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47898a09086114b0565b90508315611622577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47908190068103065b6116917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848a08096114b0565b92507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476116e17f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760028609611882565b860991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476117587f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478485097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681030690565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860908861415806117b257507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808385096002098514155b156117e9576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50935093915050565b60008060405160208152602080820152602060408201528460608201528360808201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a082015260208160c08360055afa90519250905080610b5f576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006118ae827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd456117f2565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781830960011461153a576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b806101008101831015610b6157600080fd5b8060808101831015610b6157600080fd5b600080610180838503121561199f57600080fd5b6119a98484611968565b91506119b984610100850161197a565b90509250929050565b600061010082840312156119d557600080fd5b6119df8383611968565b9392505050565b60808101818360005b6004811015611a0e5781518352602092830192909101906001016119ef565b50505092915050565b6000806101008385031215611a2b57600080fd5b611a35848461197a565b91506119b9846080850161197a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082821015611aac577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea164736f6c634300080f000a",
    "sourceMap": "529:1312:35:-:0;;;985:151;;;;;;;;;-1:-1:-1;936:32:16;719:10:18;936:18:16;:32::i;:::-;1058:5:35;1019:46;;;;;:::i;:::-;160:25:43;;;148:2;133:18;1019:46:35;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1009:7:35;:56;;-1:-1:-1;;;;;;1009:56:35;-1:-1:-1;;;;;1009:56:35;;;;;;;;;;1096:33;;1125:2;;1096:33;;;:::i;:::-;368:4:43;356:17;;;338:36;;326:2;311:18;1096:33:35;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1075:18:35;:54;;-1:-1:-1;;;;;;1075:54:35;-1:-1:-1;;;;;1075:54:35;;;;;;;;;;529:1312;;2433:187:16;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:16;;;-1:-1:-1;;;;;;2541:17:16;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;529:1312:35:-;;;;;;;;:::o;:::-;;;;;;;;:::o;196:184:43:-;529:1312:35;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100d2578063d9605de4146100f0578063f2fde38b1461011057600080fd5b80631213c3ef14610077578063380db829146100c0578063715018a6146100ca575b600080fd5b6001546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100c8610123565b005b6100c86101c5565b60005473ffffffffffffffffffffffffffffffffffffffff16610097565b6002546100979073ffffffffffffffffffffffffffffffffffffffff1681565b6100c861011e36600461040f565b6101d9565b600154604080517fd7b0fef1000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163d7b0fef19160048083019260209291908290030181865afa158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b7919061044c565b90506101c281610292565b50565b6101cd610319565b6101d7600061039a565b565b6101e1610319565b73ffffffffffffffffffffffffffffffffffffffff8116610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101c28161039a565b6002546040517ffbde929b0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063fbde929b90602401600060405180830381600087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610280565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561042157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461044557600080fd5b9392505050565b60006020828403121561045e57600080fd5b505191905056fea164736f6c634300080f000a",
    "sourceMap": "529:1312:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;651:41;;;;;;;;;;;;226:42:43;214:55;;;196:74;;184:2;169:18;651:41:35;;;;;;;1338:141;;;:::i;:::-;;1831:101:16;;;:::i;1201:85::-;1247:7;1273:6;;;1201:85;;771:44:35;;;;;;;;;2081:198:16;;;;;;:::i;:::-;;:::i;1338:141:35:-;1401:7;;:20;;;;;;;;1380:18;;1401:7;;;:18;;:20;;;;;;;;;;;;;;:7;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1380:41;;1431;1461:10;1431:29;:41::i;:::-;1370:109;1338:141::o;1831:101:16:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2081:198::-;1094:13;:11;:13::i;:::-;2169:22:::1;::::0;::::1;2161:73;;;::::0;::::1;::::0;;1476:2:43;2161:73:16::1;::::0;::::1;1458:21:43::0;1515:2;1495:18;;;1488:30;1554:34;1534:18;;;1527:62;1625:8;1605:18;;;1598:36;1651:19;;2161:73:16::1;;;;;;;;;2244:28;2263:8;2244:18;:28::i;1724:115:35:-:0;1796:18;;:36;;;;;;;;1827:25:43;;;1796:18:35;;;;;:30;;1800:18:43;;1796:36:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1724:115;:::o;1359:130:16:-;1247:7;1273:6;1422:23;1273:6;719:10:18;1422:23:16;1414:68;;;;;;;2065:2:43;1414:68:16;;;2047:21:43;;;2084:18;;;2077:30;2143:34;2123:18;;;2116:62;2195:18;;1414:68:16;1863:356:43;2433:187:16;2506:16;2525:6;;;2541:17;;;;;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;771:309:43:-;830:6;883:2;871:9;862:7;858:23;854:32;851:52;;;899:1;896;889:12;851:52;938:9;925:23;988:42;981:5;977:54;970:5;967:65;957:93;;1046:1;1043;1036:12;957:93;1069:5;771:309;-1:-1:-1;;;771:309:43:o;1085:184::-;1155:6;1208:2;1196:9;1187:7;1183:23;1179:32;1176:52;;;1224:1;1221;1214:12;1176:52;-1:-1:-1;1247:16:43;;1085:184;-1:-1:-1;1085:184:43:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "mockBridgedWorldID()": "d9605de4",
    "owner()": "8da5cb5b",
    "propagateRoot()": "380db829",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b",
    "worldID()": "1213c3ef"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"mockBridgedWorldID\",\"outputs\":[{\"internalType\":\"contract MockBridgedWorldID\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propagateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldID\",\"outputs\":[{\"internalType\":\"contract WorldIDIdentityManagerMock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Worldcoin\",\"custom:deployment\":\"deployed through make local-mock\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"propagateRoot()\":{\"details\":\"Calls this method on the L1 Proxy contract to relay roots to WorldID supported chains.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Mock State Bridge\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidRoot()\":[{\"notice\":\"Emmited when the root is not a valid root in the canonical WorldID Identity Manager contract\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"mockBridgedWorldID()\":{\"notice\":\"MockBridgedWorldID contract which will receive the root\"},\"propagateRoot()\":{\"notice\":\"Sends the latest WorldID Identity Manager root to the Bridged WorldID contract.\"},\"worldID()\":{\"notice\":\"WorldIDIdentityManagerMock contract which will hold a mock root\"}},\"notice\":\"Mock of the StateBridge to test functionality on a local chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockStateBridge.sol\":\"MockStateBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@rari-capital/solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":fx-portal/contracts/=lib/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solmate/=lib/solmate/\",\":src/=src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/SemaphoreVerifier.sol\":{\"keccak256\":\"0xfe9d9568afcaf3beacde57ea8b400f77f783505eaa77986dd9ea74c18fc8cc58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c86f9fd5e48269d983832e5725ecc57b7c73614c0fc372e53e4889fcf822345f\",\"dweb:/ipfs/QmegmxyJsrNP4iq5JkCg2YNvCpBPUHFPNWVsjg3oU9AvMF\"]},\"src/abstract/WorldIDBridge.sol\":{\"keccak256\":\"0xda64973fd8db8a48d1a3a956f749c1147382f20e49031b81693fab759de0559c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e9a4610c779d89855a987466f77df1f0911a3e9493be1e09540fbd863bcd66d\",\"dweb:/ipfs/QmbVsDpZ8n8uUaBkrzJk8hrbm7sedeTCQKRjV9wM5b2ePC\"]},\"src/interfaces/ISemaphoreVerifier.sol\":{\"keccak256\":\"0x148cc393769ae9101bb83e6a3ad96b9ad4d3cfe3e603251b6b45e393154c4f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6caa4906d0823bf15a438a57acc2b63ef8ba86c411f979d712e75e6d883d585\",\"dweb:/ipfs/QmS6cmSQXYBC8zEyMan8pJDejahAM13sqNz8NfRb1QCmKs\"]},\"src/interfaces/IWorldID.sol\":{\"keccak256\":\"0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6\",\"dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv\"]},\"src/interfaces/IWorldIDIdentityManager.sol\":{\"keccak256\":\"0xf088e152bce5d5dbf7ec47aeaf3e942bbea4f55a1f0b6422688dbe30f52ec6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e4a8e3951f0d3110b972a7ecc9374514e8ccb4d48affadbcac7c1ef1cee3d7dd\",\"dweb:/ipfs/QmYuWrenPXH92iRjkf9ERpcJuetEEqS3m9ykJW8Kaasyi1\"]},\"src/mock/MockBridgedWorldID.sol\":{\"keccak256\":\"0xeffcecbcd885c3a12313f802360baae0a52249bf1f692c0e4e71d2672d3cbd8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7449b6f9d938a45860648e4b8212098f839cacbf507c48e42488df0029a55896\",\"dweb:/ipfs/Qmazo4y41oHMJST1FJV1K7VdfUZw4xCzdvfd79UYNGaHNv\"]},\"src/mock/MockStateBridge.sol\":{\"keccak256\":\"0x7dfa41bd7f8c09b89d482fed1e24b27bd48d96c6b111e007d73832d8006f84fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554eb29ad7acf3b7a772cb0a62df10185ddd27218fb993f52b50b427f45a5244\",\"dweb:/ipfs/QmdXSJqMeyFiLDDSBWrNW2WUn1hrAM6QiQSV9LnM1dxyhD\"]},\"src/mock/WorldIDIdentityManagerMock.sol\":{\"keccak256\":\"0xbc623ea97abf266b3acb9af8789d10dfde106aac026da8a67e4a598e00786939\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://705f38e90836dd00ed363a0ae908e96ad8a230450c6831a31f0c0973e166c600\",\"dweb:/ipfs/QmX1SJiBwmvPPidpZmmJL2twGq3f7i3gDLT5yvDb7TwhCf\"]},\"src/utils/SemaphoreTreeDepthValidator.sol\":{\"keccak256\":\"0x383ed25705dadfb674c7bd2f8c4999c6368da1bc63b9f212a9526ed3672e7acb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://93f49cc11cc7a3b6d70aca44a223bfccfe5ccbc513e294076efb0d4b55b0e231\",\"dweb:/ipfs/QmSYASLuaNjFk6zyp436j5Meoa9M6ECnLure286bHKg1Ma\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidRoot"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "mockBridgedWorldID",
          "outputs": [
            {
              "internalType": "contract MockBridgedWorldID",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "propagateRoot"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "worldID",
          "outputs": [
            {
              "internalType": "contract WorldIDIdentityManagerMock",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "propagateRoot()": {
            "details": "Calls this method on the L1 Proxy contract to relay roots to WorldID supported chains."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "constructor": {
            "notice": "constructor"
          },
          "mockBridgedWorldID()": {
            "notice": "MockBridgedWorldID contract which will receive the root"
          },
          "propagateRoot()": {
            "notice": "Sends the latest WorldID Identity Manager root to the Bridged WorldID contract."
          },
          "worldID()": {
            "notice": "WorldIDIdentityManagerMock contract which will hold a mock root"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        "@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "@rari-capital/solmate/=lib/solmate/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "fx-portal/contracts/=lib/contracts/contracts/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "prb-test/=lib/prb-test/src/",
        "solmate/=lib/solmate/",
        "src/=src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/mock/MockStateBridge.sol": "MockStateBridge"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/SemaphoreVerifier.sol": {
        "keccak256": "0xfe9d9568afcaf3beacde57ea8b400f77f783505eaa77986dd9ea74c18fc8cc58",
        "urls": [
          "bzz-raw://c86f9fd5e48269d983832e5725ecc57b7c73614c0fc372e53e4889fcf822345f",
          "dweb:/ipfs/QmegmxyJsrNP4iq5JkCg2YNvCpBPUHFPNWVsjg3oU9AvMF"
        ],
        "license": "MIT"
      },
      "src/abstract/WorldIDBridge.sol": {
        "keccak256": "0xda64973fd8db8a48d1a3a956f749c1147382f20e49031b81693fab759de0559c",
        "urls": [
          "bzz-raw://3e9a4610c779d89855a987466f77df1f0911a3e9493be1e09540fbd863bcd66d",
          "dweb:/ipfs/QmbVsDpZ8n8uUaBkrzJk8hrbm7sedeTCQKRjV9wM5b2ePC"
        ],
        "license": "MIT"
      },
      "src/interfaces/ISemaphoreVerifier.sol": {
        "keccak256": "0x148cc393769ae9101bb83e6a3ad96b9ad4d3cfe3e603251b6b45e393154c4f49",
        "urls": [
          "bzz-raw://d6caa4906d0823bf15a438a57acc2b63ef8ba86c411f979d712e75e6d883d585",
          "dweb:/ipfs/QmS6cmSQXYBC8zEyMan8pJDejahAM13sqNz8NfRb1QCmKs"
        ],
        "license": "MIT"
      },
      "src/interfaces/IWorldID.sol": {
        "keccak256": "0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02",
        "urls": [
          "bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6",
          "dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv"
        ],
        "license": "MIT"
      },
      "src/interfaces/IWorldIDIdentityManager.sol": {
        "keccak256": "0xf088e152bce5d5dbf7ec47aeaf3e942bbea4f55a1f0b6422688dbe30f52ec6cf",
        "urls": [
          "bzz-raw://e4a8e3951f0d3110b972a7ecc9374514e8ccb4d48affadbcac7c1ef1cee3d7dd",
          "dweb:/ipfs/QmYuWrenPXH92iRjkf9ERpcJuetEEqS3m9ykJW8Kaasyi1"
        ],
        "license": "MIT"
      },
      "src/mock/MockBridgedWorldID.sol": {
        "keccak256": "0xeffcecbcd885c3a12313f802360baae0a52249bf1f692c0e4e71d2672d3cbd8d",
        "urls": [
          "bzz-raw://7449b6f9d938a45860648e4b8212098f839cacbf507c48e42488df0029a55896",
          "dweb:/ipfs/Qmazo4y41oHMJST1FJV1K7VdfUZw4xCzdvfd79UYNGaHNv"
        ],
        "license": "MIT"
      },
      "src/mock/MockStateBridge.sol": {
        "keccak256": "0x7dfa41bd7f8c09b89d482fed1e24b27bd48d96c6b111e007d73832d8006f84fe",
        "urls": [
          "bzz-raw://554eb29ad7acf3b7a772cb0a62df10185ddd27218fb993f52b50b427f45a5244",
          "dweb:/ipfs/QmdXSJqMeyFiLDDSBWrNW2WUn1hrAM6QiQSV9LnM1dxyhD"
        ],
        "license": "MIT"
      },
      "src/mock/WorldIDIdentityManagerMock.sol": {
        "keccak256": "0xbc623ea97abf266b3acb9af8789d10dfde106aac026da8a67e4a598e00786939",
        "urls": [
          "bzz-raw://705f38e90836dd00ed363a0ae908e96ad8a230450c6831a31f0c0973e166c600",
          "dweb:/ipfs/QmX1SJiBwmvPPidpZmmJL2twGq3f7i3gDLT5yvDb7TwhCf"
        ],
        "license": "MIT"
      },
      "src/utils/SemaphoreTreeDepthValidator.sol": {
        "keccak256": "0x383ed25705dadfb674c7bd2f8c4999c6368da1bc63b9f212a9526ed3672e7acb",
        "urls": [
          "bzz-raw://93f49cc11cc7a3b6d70aca44a223bfccfe5ccbc513e294076efb0d4b55b0e231",
          "dweb:/ipfs/QmSYASLuaNjFk6zyp436j5Meoa9M6ECnLure286bHKg1Ma"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/mock/MockStateBridge.sol",
    "id": 32410,
    "exportedSymbols": {
      "IWorldIDIdentityManager": [
        32276
      ],
      "MockBridgedWorldID": [
        32329
      ],
      "MockStateBridge": [
        32409
      ],
      "Ownable": [
        25195
      ],
      "WorldIDIdentityManagerMock": [
        32471
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1810:35",
    "nodes": [
      {
        "id": 32331,
        "nodeType": "PragmaDirective",
        "src": "32:24:35",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 32333,
        "nodeType": "ImportDirective",
        "src": "58:60:35",
        "nodes": [],
        "absolutePath": "src/mock/MockBridgedWorldID.sol",
        "file": "./MockBridgedWorldID.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32410,
        "sourceUnit": 32330,
        "symbolAliases": [
          {
            "foreign": {
              "id": 32332,
              "name": "MockBridgedWorldID",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 32329,
              "src": "66:18:35",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 32335,
        "nodeType": "ImportDirective",
        "src": "119:76:35",
        "nodes": [],
        "absolutePath": "src/mock/WorldIDIdentityManagerMock.sol",
        "file": "./WorldIDIdentityManagerMock.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32410,
        "sourceUnit": 32472,
        "symbolAliases": [
          {
            "foreign": {
              "id": 32334,
              "name": "WorldIDIdentityManagerMock",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 32471,
              "src": "127:26:35",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 32337,
        "nodeType": "ImportDirective",
        "src": "196:66:35",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "openzeppelin-contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32410,
        "sourceUnit": 25196,
        "symbolAliases": [
          {
            "foreign": {
              "id": 32336,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25195,
              "src": "204:7:35",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 32339,
        "nodeType": "ImportDirective",
        "src": "263:82:35",
        "nodes": [],
        "absolutePath": "src/interfaces/IWorldIDIdentityManager.sol",
        "file": "../interfaces/IWorldIDIdentityManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32410,
        "sourceUnit": 32277,
        "symbolAliases": [
          {
            "foreign": {
              "id": 32338,
              "name": "IWorldIDIdentityManager",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 32276,
              "src": "271:23:35",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 32409,
        "nodeType": "ContractDefinition",
        "src": "529:1312:35",
        "nodes": [
          {
            "id": 32346,
            "nodeType": "VariableDeclaration",
            "src": "651:41:35",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 32343,
              "nodeType": "StructuredDocumentation",
              "src": "571:75:35",
              "text": "@notice WorldIDIdentityManagerMock contract which will hold a mock root"
            },
            "functionSelector": "1213c3ef",
            "mutability": "mutable",
            "name": "worldID",
            "nameLocation": "685:7:35",
            "scope": 32409,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
              "typeString": "contract WorldIDIdentityManagerMock"
            },
            "typeName": {
              "id": 32345,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 32344,
                "name": "WorldIDIdentityManagerMock",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 32471,
                "src": "651:26:35"
              },
              "referencedDeclaration": 32471,
              "src": "651:26:35",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
                "typeString": "contract WorldIDIdentityManagerMock"
              }
            },
            "visibility": "public"
          },
          {
            "id": 32350,
            "nodeType": "VariableDeclaration",
            "src": "771:44:35",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 32347,
              "nodeType": "StructuredDocumentation",
              "src": "699:67:35",
              "text": "@notice MockBridgedWorldID contract which will receive the root"
            },
            "functionSelector": "d9605de4",
            "mutability": "mutable",
            "name": "mockBridgedWorldID",
            "nameLocation": "797:18:35",
            "scope": 32409,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
              "typeString": "contract MockBridgedWorldID"
            },
            "typeName": {
              "id": 32349,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 32348,
                "name": "MockBridgedWorldID",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 32329,
                "src": "771:18:35"
              },
              "referencedDeclaration": 32329,
              "src": "771:18:35",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
                "typeString": "contract MockBridgedWorldID"
              }
            },
            "visibility": "public"
          },
          {
            "id": 32353,
            "nodeType": "ErrorDefinition",
            "src": "931:20:35",
            "nodes": [],
            "documentation": {
              "id": 32351,
              "nodeType": "StructuredDocumentation",
              "src": "822:104:35",
              "text": "@notice Emmited when the root is not a valid root in the canonical WorldID Identity Manager contract"
            },
            "errorSelector": "504570e3",
            "name": "InvalidRoot",
            "nameLocation": "937:11:35",
            "parameters": {
              "id": 32352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "948:2:35"
            }
          },
          {
            "id": 32380,
            "nodeType": "FunctionDefinition",
            "src": "985:151:35",
            "nodes": [],
            "body": {
              "id": 32379,
              "nodeType": "Block",
              "src": "999:137:35",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 32366,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 32357,
                      "name": "worldID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32346,
                      "src": "1009:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
                        "typeString": "contract WorldIDIdentityManagerMock"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "3078313131",
                              "id": 32363,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1058:5:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_273_by_1",
                                "typeString": "int_const 273"
                              },
                              "value": "0x111"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_273_by_1",
                                "typeString": "int_const 273"
                              }
                            ],
                            "id": 32362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1050:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 32361,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1050:7:35",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 32364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1050:14:35",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 32360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1019:30:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_uint256_$returns$_t_contract$_WorldIDIdentityManagerMock_$32471_$",
                          "typeString": "function (uint256) returns (contract WorldIDIdentityManagerMock)"
                        },
                        "typeName": {
                          "id": 32359,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 32358,
                            "name": "WorldIDIdentityManagerMock",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 32471,
                            "src": "1023:26:35"
                          },
                          "referencedDeclaration": 32471,
                          "src": "1023:26:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
                            "typeString": "contract WorldIDIdentityManagerMock"
                          }
                        }
                      },
                      "id": 32365,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1019:46:35",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
                        "typeString": "contract WorldIDIdentityManagerMock"
                      }
                    },
                    "src": "1009:56:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
                      "typeString": "contract WorldIDIdentityManagerMock"
                    }
                  },
                  "id": 32367,
                  "nodeType": "ExpressionStatement",
                  "src": "1009:56:35"
                },
                {
                  "expression": {
                    "id": 32377,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 32368,
                      "name": "mockBridgedWorldID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32350,
                      "src": "1075:18:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
                        "typeString": "contract MockBridgedWorldID"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "3330",
                              "id": 32374,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1125:2:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_30_by_1",
                                "typeString": "int_const 30"
                              },
                              "value": "30"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_30_by_1",
                                "typeString": "int_const 30"
                              }
                            ],
                            "id": 32373,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1119:5:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": {
                              "id": 32372,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "1119:5:35",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 32375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1119:9:35",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        ],
                        "id": 32371,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1096:22:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_uint8_$returns$_t_contract$_MockBridgedWorldID_$32329_$",
                          "typeString": "function (uint8) returns (contract MockBridgedWorldID)"
                        },
                        "typeName": {
                          "id": 32370,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 32369,
                            "name": "MockBridgedWorldID",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 32329,
                            "src": "1100:18:35"
                          },
                          "referencedDeclaration": 32329,
                          "src": "1100:18:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
                            "typeString": "contract MockBridgedWorldID"
                          }
                        }
                      },
                      "id": 32376,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1096:33:35",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
                        "typeString": "contract MockBridgedWorldID"
                      }
                    },
                    "src": "1075:54:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
                      "typeString": "contract MockBridgedWorldID"
                    }
                  },
                  "id": 32378,
                  "nodeType": "ExpressionStatement",
                  "src": "1075:54:35"
                }
              ]
            },
            "documentation": {
              "id": 32354,
              "nodeType": "StructuredDocumentation",
              "src": "957:23:35",
              "text": "@notice constructor"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 32355,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "996:2:35"
            },
            "returnParameters": {
              "id": 32356,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "999:0:35"
            },
            "scope": 32409,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 32395,
            "nodeType": "FunctionDefinition",
            "src": "1338:141:35",
            "nodes": [],
            "body": {
              "id": 32394,
              "nodeType": "Block",
              "src": "1370:109:35",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    32385
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 32385,
                      "mutability": "mutable",
                      "name": "latestRoot",
                      "nameLocation": "1388:10:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 32394,
                      "src": "1380:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 32384,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1380:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 32389,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 32386,
                        "name": "worldID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32346,
                        "src": "1401:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_WorldIDIdentityManagerMock_$32471",
                          "typeString": "contract WorldIDIdentityManagerMock"
                        }
                      },
                      "id": 32387,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRoot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 32470,
                      "src": "1401:18:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                        "typeString": "function () view external returns (uint256)"
                      }
                    },
                    "id": 32388,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1401:20:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1380:41:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 32391,
                        "name": "latestRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32385,
                        "src": "1461:10:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 32390,
                      "name": "_sendRootToMockBridgedWorldID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32408,
                      "src": "1431:29:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 32392,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1431:41:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 32393,
                  "nodeType": "ExpressionStatement",
                  "src": "1431:41:35"
                }
              ]
            },
            "documentation": {
              "id": 32381,
              "nodeType": "StructuredDocumentation",
              "src": "1142:191:35",
              "text": "@notice Sends the latest WorldID Identity Manager root to the Bridged WorldID contract.\n @dev Calls this method on the L1 Proxy contract to relay roots to WorldID supported chains."
            },
            "functionSelector": "380db829",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "propagateRoot",
            "nameLocation": "1347:13:35",
            "parameters": {
              "id": 32382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1360:2:35"
            },
            "returnParameters": {
              "id": 32383,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1370:0:35"
            },
            "scope": 32409,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 32408,
            "nodeType": "FunctionDefinition",
            "src": "1724:115:35",
            "nodes": [],
            "body": {
              "id": 32407,
              "nodeType": "Block",
              "src": "1786:53:35",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 32404,
                        "name": "root",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32398,
                        "src": "1827:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 32401,
                        "name": "mockBridgedWorldID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32350,
                        "src": "1796:18:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_MockBridgedWorldID_$32329",
                          "typeString": "contract MockBridgedWorldID"
                        }
                      },
                      "id": 32403,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "receiveRoot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 32314,
                      "src": "1796:30:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 32405,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1796:36:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 32406,
                  "nodeType": "ExpressionStatement",
                  "src": "1796:36:35"
                }
              ]
            },
            "documentation": {
              "id": 32396,
              "nodeType": "StructuredDocumentation",
              "src": "1562:157:35",
              "text": "@dev Calls this method on the L1 Proxy contract to relay roots to WorldID supported chains.\n @param root The latest WorldID Identity Manager root."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sendRootToMockBridgedWorldID",
            "nameLocation": "1733:29:35",
            "parameters": {
              "id": 32399,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32398,
                  "mutability": "mutable",
                  "name": "root",
                  "nameLocation": "1771:4:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 32408,
                  "src": "1763:12:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1763:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1762:14:35"
            },
            "returnParameters": {
              "id": 32400,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1786:0:35"
            },
            "scope": 32409,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 32341,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25195,
              "src": "557:7:35"
            },
            "id": 32342,
            "nodeType": "InheritanceSpecifier",
            "src": "557:7:35"
          }
        ],
        "canonicalName": "MockStateBridge",
        "contractDependencies": [
          32329,
          32471
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 32340,
          "nodeType": "StructuredDocumentation",
          "src": "347:182:35",
          "text": "@title Mock State Bridge\n @author Worldcoin\n @notice Mock of the StateBridge to test functionality on a local chain\n @custom:deployment deployed through make local-mock"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          32409,
          25195,
          25300
        ],
        "name": "MockStateBridge",
        "nameLocation": "538:15:35",
        "scope": 32410,
        "usedErrors": [
          32353
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 35
}